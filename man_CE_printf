
.TH _PRINTF 3 "Jan 30, 2025" "0.1" "ALX - printf"

.SH NAME
.B _printf\fR - Formatted output conversion

.SH SYNOPSIS
.B #include \fB"main.h"

.B int _printf(const char *\fIformat\fB, ...);

.SH DESCRIPTION
The function \fB_printf()\fR writes output to \fIstdout\fR, the standard output. 
It writes under the control of a \fIformat\fR string that specifies how subsequent 
arguments (accessed via the variable-length argument facilities of stdarg) are 
converted for output.

.B Return value
Upon successful return, \fB_printf()\fR returns the number of characters printed 
(excluding the null byte used to end output to strings). If an output error is 
encountered, -1 is returned.

.B Format of the format string
The format string is a constant character string composed of zero or more 
directives: ordinary characters (not \fB%\fR) copied unchanged to the output 
stream; and conversion specifications, each of which results in fetching zero or 
more subsequent arguments. Conversion specification is introduced by the 
character \fB%\fR and ends with a \fIconversion specifier\fR.

.B Flag Characters
The character \fB%\fR may be followed by zero or more of the following flags:

.RS
.B #
For \fBo\fR conversions, the first character of the output string is prefixed with 0 
if it was not zero already. For x and X converions, 0x or 0X, respectively, is 
prepended for non-zero numbers.

.B ''
(space) A blank is left before a positive number or empty string produced by a signed 
conversion.

.B +
A sign (+ or -) is always placed before a number produced by signed conversion.

.B 0
For \fBd\fR, \fBi\fR, \fBo\fR, \fBu\fR, \fBx\fR, and \fBX\fR conversions, the 
converted value is padded on the left with zeroes rather than blanks. If the 
\fB0\fR flag is provided to a numeric conversion with a specified precision, it is 
ignored.

.B -
The converted value is left-justified (padded on the right with blanks instead of on 
the left with blanks or zeroes). Overrides a \fB0\fR flag.
.RE

.B Field Width
After flags, a minimum field width may be specified by a decimal digit string. The 
first digit must be non-zero. If the converted value has fewer characters than the 
provided width, the output is padded on the left or right with spaces (depending on 
whether the \fB-\fR flag was provided).

Alternatively, width may be provided as an argument using the '*' character. For 
example, in the following:

.in
_printf("%*d\\n", 6, 1);
.in

the argument 6 is considered the width for the conversion of the decimal 1.

.B Precision
After any flags or provided width, a precision may be specified by a '.' followed by 
a decimal digit string. For \fBd\fR, \fBi\fR, \fBo\fR, \fBu\fR, \fBx\fR, and 
\fBX\fR conversions, the precision specifies the minimum number of digits to appear. 
For \fBs\fR and \fBS\fR conversions, the precision specifies the maximum characters 
to be printed.

Alternatively, precision may be provided as an argument using the '*' character after 
the '.'. For example, in the following:

.in
_printf("%.*d\\n", 6, 1);
.in

the argument 6 is considered the precision for the conversion of the decimal 1.

.B Conversion Specifiers
A character that specifies the type of conversion to be applied. The conversion 
specifiers and their meaning are:

.RS
.B d, i
The \fIint\fR argument is converted to signed decimal notation.

.B b
The \fIunsigned int\fR argument is converted to binary.

.B o, u, x, X
The \fIunsigned int\fR argument is converted to unsigned octal (\fBo\fR), unsigned 
decimal (\fBu\fR), or unsigned hexadecimal (\fBx\fR and \fBX\fR) notation. The 
letters \fBabcdef\fR are used for \fBx\fR conversions; the letters \fBABCDEF\fR 
are used for \fBX\fR conversions.

.B c
The \fIint\fR argument is converted to an \fIunsigned char\fR, and the resulting 
character is written.

.B s
The \fIconst char *\fR argument is expected to be a pointer to a character array 
(pointer to a string). Characters from the array are written starting from the first 
element of the array and ending at, but not including, the terminating null byte 
('\\\\0').

.B S
Identical to the \fBS\fR conversion specifier, except any non-printable characters in 
the array (i.e., characters with an ASCII value < 32 or >= 127) are written as 
\fB\\x\fR followed by the ASCII code value in hexadecimal (upper case, two 
characters).

.B r
Identical to the \fBs\fR conversion specifier, except characters from the array are 
written in reverse, starting from (but not including) the terminating null byte 
('\\\\0') and ending at the first element of the array.

.B R
Identical to the \fBs\fR conversion specifier, except each character of the array is 
converted to its corresponding character in ROT13 before being written.

.B p
The address of the argument is written. The address is written in hexadecimal with a 
leading \fI0x\fR.

.B %
A '%' is written. No argument is converted. The complete conversion specification is 
'%%'.
.RE

.SH BUGS
Code such as \fB_printf(\fIfoo\fB);\fR possibly indicates a bug, since 
\fIfoo\fR may contain a % character.

.SH EXAMPLE
To print the address of Holberton School in the form "972 Mission St., San 
Francisco, CA 94103", followed by a new line, where \fIstreet\fR, \fIcity\fR, and 
\fIstate\fR are pointers to strings:

.RS
#include "main.h"

int main(void)

{

	char *street = "Mission St.";

	char *city = "San Francisco",

	char *state = "CA";

	_printf("%d %s, %s, %s, %d\\n", 972, street, city, state, 94103);

}
.RE

To print the result of basic mathematical operations prepended by signs and all 
numbers printed with a minimum precision of two digits:

.RS
#include "holberton.h"

int main(void)

{

	_printf("%.2d + %.2d = %+.2d\\n", 1, 2, 1 + 2);

	_printf("%d
